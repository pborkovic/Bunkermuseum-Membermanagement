# Development Dockerfile with hot reload capabilities
FROM ghcr.io/jqlang/jq:latest AS jq-stage

# Development stage
FROM eclipse-temurin:21-jdk AS development
COPY --from=jq-stage /jq /usr/bin/jq
RUN jq --version

ENV HOME=/app
RUN mkdir -p $HOME
WORKDIR $HOME

# Install Node.js for frontend development
RUN apt-get update && \
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy dependency files first for better caching
COPY package*.json ./
COPY pom.xml ./
COPY mvnw ./
COPY .mvn ./.mvn/

# Install NPM dependencies
RUN npm install

# Copy source code (this will be overridden by volumes in dev)
COPY . .

# Expose ports
EXPOSE 8080 3000

# Development command - this will be overridden by docker-compose
CMD ["./mvnw", "spring-boot:run"]

# Production build stage (same as original)
FROM eclipse-temurin:21-jdk AS build
COPY --from=jq-stage /jq /usr/bin/jq
RUN jq --version

ENV HOME=/app
RUN mkdir -p $HOME
WORKDIR $HOME
COPY . $HOME

RUN --mount=type=cache,target=/root/.m2 \
    --mount=type=secret,id=proKey \
    --mount=type=secret,id=offlineKey \
    sh -c 'PRO_KEY=$(jq -r ".proKey // empty" /run/secrets/proKey 2>/dev/null || echo "") && \
    OFFLINE_KEY=$(cat /run/secrets/offlineKey 2>/dev/null || echo "") && \
    ./mvnw clean package -Pproduction -DskipTests -Dvaadin.proKey=${PRO_KEY} -Dvaadin.offlineKey=${OFFLINE_KEY}'

# Production runtime stage (same as original)
FROM nginx:alpine AS production
COPY --from=build /app/target/*.jar /app/app.jar

RUN apk add --no-cache openjdk21-jre

COPY nginx/nginx.conf /etc/nginx/nginx.conf

RUN echo '#!/bin/sh' > /start.sh && \
    echo 'java -jar /app/app.jar --spring.profiles.active=prod &' >> /start.sh && \
    echo 'nginx -g "daemon off;"' >> /start.sh && \
    chmod +x /start.sh

EXPOSE 80
CMD ["/start.sh"]